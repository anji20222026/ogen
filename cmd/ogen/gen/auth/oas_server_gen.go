// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	"github.com/go-chi/chi/v5"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetCurrentUser implements getCurrentUser operation.
	//
	// 获取当前用户信息.
	//
	// GET /me
	GetCurrentUser(ctx context.Context) (GetCurrentUserRes, error)
	// Login implements login operation.
	//
	// 登录.
	//
	// POST /login
	Login(ctx context.Context, req *LoginRequest) (LoginRes, error)
	// Logout implements logout operation.
	//
	// 注销登录.
	//
	// GET /logout
	Logout(ctx context.Context) (LogoutRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}

// Register request handlers in router.
func (s *Server) Register(r chi.Router) {
	r.MethodFunc("get", "/me", s.HandleGetCurrentUserRequest)
	r.MethodFunc("post", "/login", s.HandleLoginRequest)
	r.MethodFunc("get", "/logout", s.HandleLogoutRequest)
}

// DefaultMux returns new *chi.Mux with called Register method on it.
func (s *Server) DefaultMux() *chi.Mux {
	mux := chi.NewMux()
	s.Register(mux)
	return mux
}
